import tkinter as tk
from tkinter import filedialog
from pydub import AudioSegment
from pydub.playback import play, stop
import threading


class PitchShifterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Pitch Shifter")

        self.audio = None
        self.pitch_factor = 1.0
        self.playing = False  # Flag to check if audio is playing
        self.audio_thread = None  # Thread for audio playback

        self.create_widgets()

    def create_widgets(self):
        # Frame to organize widgets
        self.main_frame = tk.Frame(self.root, padx=20, pady=20)
        self.main_frame.pack()

        # Load Button
        load_button = tk.Button(self.main_frame, text="Load Audio", command=self.load_audio, width=15)
        load_button.grid(row=0, column=0, padx=5, pady=5)

        # Pitch Factor Scale
        pitch_label = tk.Label(self.main_frame, text="Pitch Factor:", width=15)
        pitch_label.grid(row=1, column=0, padx=5, pady=5)

        self.pitch_scale = tk.Scale(self.main_frame, from_=0.5, to=2.0, resolution=0.1, orient=tk.HORIZONTAL, command=self.update_pitch, length=200)
        self.pitch_scale.set(1.0)
        self.pitch_scale.grid(row=1, column=1, padx=5, pady=5)

        # Play Button
        play_button = tk.Button(self.main_frame, text="Play", command=self.play_audio, width=15)
        play_button.grid(row=2, column=0, padx=5, pady=5)

        # Stop Button
        stop_button = tk.Button(self.main_frame, text="Stop", command=self.stop_audio, width=15)
        stop_button.grid(row=2, column=1, padx=5, pady=5)

    def load_audio(self):
        file_path = filedialog.askopenfilename(filetypes=[("Audio Files", "*.wav;*.mp3")])
        if file_path:
            self.audio = AudioSegment.from_file(file_path)

    def update_pitch(self, value):
        self.pitch_factor = float(value)

    def play_audio(self):
        if self.audio is not None and not self.playing:
            shifted_audio = self.audio._spawn(self.audio.raw_data, overrides={
                "frame_rate": int(self.audio.frame_rate * self.pitch_factor)
            })

            self.audio_thread = threading.Thread(target=self.play_audio_thread, args=(shifted_audio,))
            self.audio_thread.start()
            self.playing = True

    def play_audio_thread(self, audio):
        play(audio)

    def stop_audio(self):
        if self.playing and self.audio_thread:
            self.audio_thread.stop()
            self.playing = False


if __name__ == "__main__":
    root = tk.Tk()
    app = PitchShifterApp(root)
    root.mainloop()
